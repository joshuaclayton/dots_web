Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var setState = Elm.Native.Port.make(_elm).inboundSignal("setState","Json.Encode.Value",function (v) {    return v;});
   var setGameId = Elm.Native.Port.make(_elm).inboundSignal("setGameId",
   "Int",
   function (v) {
      return typeof v === "number" && isFinite(v) && Math.floor(v) === v ? v : _U.badPort("an integer",v);
   });
   var view = function (game) {    return A2($Html.section,_U.list([$Html$Attributes.$class("modal")]),_U.list([$Html.text($Basics.toString(game.id))]));};
   var update = F2(function (gameId,previousGame) {    return _U.update(previousGame,{id: gameId});});
   var initialGame = {id: 1};
   var gameState = A3($Signal.foldp,update,initialGame,setGameId);
   var main = A2($Signal.map,view,gameState);
   var Game = function (a) {    return {id: a};};
   return _elm.Main.values = {_op: _op,Game: Game,initialGame: initialGame,update: update,view: view,gameState: gameState,main: main};
};