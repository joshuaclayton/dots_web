Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   if (_elm.DotsAndBoxes.values) return _elm.DotsAndBoxes.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$Decode = Elm.DotsAndBoxes.Decode.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $DotsAndBoxes$View = Elm.DotsAndBoxes.View.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var setState = Elm.Native.Port.make(_elm).inboundSignal("setState","Json.Encode.Value",function (v) {    return v;});
   var setGameId = Elm.Native.Port.make(_elm).inboundSignal("setGameId",
   "Int",
   function (v) {
      return typeof v === "number" && isFinite(v) && Math.floor(v) === v ? v : _U.badPort("an integer",v);
   });
   var updateLobby = F2(function (payload,oldLobby) {
      var newLobby = A2($Json$Decode.decodeValue,$DotsAndBoxes$Decode.lobbyDecoder,payload);
      return A2($Result.withDefault,oldLobby,newLobby);
   });
   var lobbyState = A3($Signal.foldp,updateLobby,$DotsAndBoxes$Model.nullLobby,setState);
   var main = A2($Signal.map,$DotsAndBoxes$View.mainView,lobbyState);
   return _elm.DotsAndBoxes.values = {_op: _op,updateLobby: updateLobby,lobbyState: lobbyState,main: main};
};