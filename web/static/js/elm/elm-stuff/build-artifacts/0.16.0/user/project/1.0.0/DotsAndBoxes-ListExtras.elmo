Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.ListExtras = Elm.DotsAndBoxes.ListExtras || {};
Elm.DotsAndBoxes.ListExtras.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   _elm.DotsAndBoxes.ListExtras = _elm.DotsAndBoxes.ListExtras || {};
   if (_elm.DotsAndBoxes.ListExtras.values) return _elm.DotsAndBoxes.ListExtras.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var groupBy = F2(function (grouping,list) {
      var uniqueValues = $Set.toList($Set.fromList(A2($List.map,grouping,list)));
      return A2($List.map,
      function (value) {
         return {ctor: "_Tuple2",_0: value,_1: A2($List.filter,function (i) {    return _U.eq(grouping(i),value);},list)};
      },
      uniqueValues);
   });
   var detect = F2(function (filter,list) {    return $List.head(A2($List.filter,filter,list));});
   var values = function (groupedList) {    return A2($List.map,function (_p0) {    var _p1 = _p0;return _p1._1;},groupedList);};
   return _elm.DotsAndBoxes.ListExtras.values = {_op: _op,values: values,groupBy: groupBy,detect: detect};
};