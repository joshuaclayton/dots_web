Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.View = Elm.DotsAndBoxes.View || {};
Elm.DotsAndBoxes.View.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   _elm.DotsAndBoxes.View = _elm.DotsAndBoxes.View || {};
   if (_elm.DotsAndBoxes.View.values) return _elm.DotsAndBoxes.View.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $DotsAndBoxes$RegistrationView = Elm.DotsAndBoxes.RegistrationView.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var separatedList = function (words) {
      return A3($List.foldr,F2(function (x,y) {    return A2($Basics._op["++"],x,y);}),"",A2($List.intersperse,", ",words));
   };
   var pendingImplementationView = function (model) {
      var playerNames = separatedList(A2($List.map,function (_) {    return _.name;},model.lobby.game.players));
      return A2($Html.section,
      _U.list([$Html$Attributes.$class("modal")]),
      _U.list([$Html.text(A2($Basics._op["++"],"Not yet implemented: ",$Basics.toString(model.game_id)))
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,$Html.text(A2($Basics._op["++"],"Player name: ",A2($Maybe.withDefault,"Not set",model.player_name)))
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,$Html.text(A2($Basics._op["++"],"Players present: ",playerNames))]));
   };
   var notStartedView = F2(function (address,model) {
      var _p0 = model.player;
      if (_p0.ctor === "Nothing") {
            return A2($DotsAndBoxes$RegistrationView.registrationView,address,model);
         } else {
            return pendingImplementationView(model);
         }
   });
   var loadingView = A2($Html.section,_U.list([$Html$Attributes.$class("modal")]),_U.list([$Html.text("Loading the game...")]));
   var mainView = F2(function (address,model) {
      var _p1 = model.lobby.status;
      switch (_p1.ctor)
      {case "Unknown": return loadingView;
         case "NotStarted": return A2(notStartedView,address,model);
         default: return pendingImplementationView(model);}
   });
   return _elm.DotsAndBoxes.View.values = {_op: _op
                                          ,mainView: mainView
                                          ,loadingView: loadingView
                                          ,notStartedView: notStartedView
                                          ,separatedList: separatedList
                                          ,pendingImplementationView: pendingImplementationView};
};