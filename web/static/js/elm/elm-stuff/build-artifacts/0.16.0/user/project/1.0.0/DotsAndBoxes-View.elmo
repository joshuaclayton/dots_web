Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.View = Elm.DotsAndBoxes.View || {};
Elm.DotsAndBoxes.View.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   _elm.DotsAndBoxes.View = _elm.DotsAndBoxes.View || {};
   if (_elm.DotsAndBoxes.View.values) return _elm.DotsAndBoxes.View.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$CustomEvent = Elm.DotsAndBoxes.CustomEvent.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $DotsAndBoxes$PendingImplementationView = Elm.DotsAndBoxes.PendingImplementationView.make(_elm),
   $DotsAndBoxes$PlayersView = Elm.DotsAndBoxes.PlayersView.make(_elm),
   $DotsAndBoxes$RegistrationView = Elm.DotsAndBoxes.RegistrationView.make(_elm),
   $DotsAndBoxes$ScoreView = Elm.DotsAndBoxes.ScoreView.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var startGameForm = function (address) {
      return A2($Html.form,
      _U.list([A2($DotsAndBoxes$CustomEvent.onSubmit,address,$DotsAndBoxes$Model.StartGame)]),
      _U.list([A2($Html.ul,
      _U.list([]),
      _U.list([A2($Html.li,
      _U.list([]),
      _U.list([A2($Html.input,_U.list([$Html$Attributes.type$("submit"),$Html$Attributes.value("Start the game")]),_U.list([]))]))]))]));
   };
   var waitingForOtherPlayersView = F2(function (address,model) {
      return A2($Html.section,
      _U.list([$Html$Attributes.$class("modal")]),
      _U.list([$DotsAndBoxes$PlayersView.playersList(model.lobby.game.players),startGameForm(address)]));
   });
   var startedView = F2(function (address,model) {
      return model.lobby.game.completed ? $DotsAndBoxes$ScoreView.scoreView(model.lobby.game.score) : $DotsAndBoxes$PendingImplementationView.pendingImplementationView(model);
   });
   var notStartedView = F2(function (address,model) {
      var _p0 = model.player;
      if (_p0.ctor === "Nothing") {
            return A2($DotsAndBoxes$RegistrationView.registrationView,address,model);
         } else {
            return A2(waitingForOtherPlayersView,address,model);
         }
   });
   var loadingView = A2($Html.section,
   _U.list([$Html$Attributes.$class("modal loading")]),
   _U.list([A2($Html.h2,_U.list([]),_U.list([$Html.text("Loading the game...")]))]));
   var mainView = F2(function (address,model) {
      var _p1 = model.lobby.status;
      switch (_p1.ctor)
      {case "Unknown": return loadingView;
         case "NotStarted": return A2(notStartedView,address,model);
         default: return A2(startedView,address,model);}
   });
   return _elm.DotsAndBoxes.View.values = {_op: _op
                                          ,mainView: mainView
                                          ,loadingView: loadingView
                                          ,notStartedView: notStartedView
                                          ,startedView: startedView
                                          ,waitingForOtherPlayersView: waitingForOtherPlayersView
                                          ,startGameForm: startGameForm};
};