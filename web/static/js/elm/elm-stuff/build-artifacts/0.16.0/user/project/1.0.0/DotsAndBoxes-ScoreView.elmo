Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.ScoreView = Elm.DotsAndBoxes.ScoreView || {};
Elm.DotsAndBoxes.ScoreView.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   _elm.DotsAndBoxes.ScoreView = _elm.DotsAndBoxes.ScoreView || {};
   if (_elm.DotsAndBoxes.ScoreView.values) return _elm.DotsAndBoxes.ScoreView.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var scoreBreakdown = function (playerScore) {
      return _U.list([A2($Html.dt,_U.list([]),_U.list([$Html.text(playerScore.player.name)]))
                     ,A2($Html.dd,_U.list([]),_U.list([$Html.text($Basics.toString(playerScore.score))]))]);
   };
   var scoresBreakdown = function (playerScores) {    return A2($Html.dl,_U.list([]),$List.concat(A2($List.map,scoreBreakdown,playerScores)));};
   var winnersList = function (score) {
      var winnerNames = A2($List.map,function (_) {    return _.name;},score.winners);
      return $Html.text(A3($List.foldr,F2(function (x,y) {    return A2($Basics._op["++"],x,y);}),"",winnerNames));
   };
   var scoreView = function (score) {
      return A2($Html.section,
      _U.list([$Html$Attributes.$class("modal")]),
      _U.list([A2($Html.h2,_U.list([]),_U.list([$Html.text("Winner: "),winnersList(score)])),scoresBreakdown(score.scores)]));
   };
   return _elm.DotsAndBoxes.ScoreView.values = {_op: _op,scoreView: scoreView};
};