Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.WebSocketsPush = Elm.DotsAndBoxes.WebSocketsPush || {};
Elm.DotsAndBoxes.WebSocketsPush.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   _elm.DotsAndBoxes.WebSocketsPush = _elm.DotsAndBoxes.WebSocketsPush || {};
   if (_elm.DotsAndBoxes.WebSocketsPush.values) return _elm.DotsAndBoxes.WebSocketsPush.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var sideToString = function (side) {
      var _p0 = side;
      switch (_p0.ctor)
      {case "Top": return "Top";
         case "Right": return "Right";
         case "Bottom": return "Bottom";
         case "Left": return "Left";
         default: return "";}
   };
   var modelToWebSocketsPayload = function (model) {
      var _p1 = model.last_action;
      switch (_p1.ctor)
      {case "SignUp": return $Json$Encode.object(_U.list([{ctor: "_Tuple2",_0: "game_id",_1: $Json$Encode.$int(model.game_id)}
                                                         ,{ctor: "_Tuple2",_0: "width",_1: $Json$Encode.$int(model.board_size)}
                                                         ,{ctor: "_Tuple2",_0: "height",_1: $Json$Encode.$int(model.board_size)}
                                                         ,{ctor: "_Tuple2"
                                                          ,_0: "player"
                                                          ,_1: $Json$Encode.object(_U.list([{ctor: "_Tuple2"
                                                                                            ,_0: "name"
                                                                                            ,_1: $Json$Encode.string(A2($Maybe.withDefault,
                                                                                            "Unknown",
                                                                                            model.player_name))}
                                                                                           ,{ctor: "_Tuple2"
                                                                                            ,_0: "id"
                                                                                            ,_1: $Json$Encode.string(model.player_guid)}]))}
                                                         ,{ctor: "_Tuple2",_0: "action",_1: $Json$Encode.string("game:begin")}]));
         case "StartGame": return $Json$Encode.object(_U.list([{ctor: "_Tuple2",_0: "game_id",_1: $Json$Encode.$int(model.game_id)}
                                                              ,{ctor: "_Tuple2",_0: "action",_1: $Json$Encode.string("game:start")}]));
         case "ClaimSide": var _p2 = _p1._0;
           return $Json$Encode.object(_U.list([{ctor: "_Tuple2",_0: "game_id",_1: $Json$Encode.$int(model.game_id)}
                                              ,{ctor: "_Tuple2",_0: "x",_1: $Json$Encode.$int(_p2.coordinates.x)}
                                              ,{ctor: "_Tuple2",_0: "y",_1: $Json$Encode.$int(_p2.coordinates.y)}
                                              ,{ctor: "_Tuple2",_0: "position",_1: $Json$Encode.string(sideToString(_p1._1))}
                                              ,{ctor: "_Tuple2",_0: "action",_1: $Json$Encode.string("game:claim")}]));
         case "UpdatePlayerGuid": return $Json$Encode.object(_U.list([{ctor: "_Tuple2",_0: "game_id",_1: $Json$Encode.$int(model.game_id)}
                                                                     ,{ctor: "_Tuple2",_0: "player",_1: $Json$Encode.string(_p1._0)}
                                                                     ,{ctor: "_Tuple2",_0: "action",_1: $Json$Encode.string("player:rejoin")}]));
         default: return $Json$Encode.object(_U.list([{ctor: "_Tuple2",_0: "game_id",_1: $Json$Encode.$int(model.game_id)}]));}
   };
   return _elm.DotsAndBoxes.WebSocketsPush.values = {_op: _op,modelToWebSocketsPayload: modelToWebSocketsPayload};
};