Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   if (_elm.DotsAndBoxes.values) return _elm.DotsAndBoxes.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $DotsAndBoxes$Update = Elm.DotsAndBoxes.Update.make(_elm),
   $DotsAndBoxes$View = Elm.DotsAndBoxes.View.make(_elm),
   $DotsAndBoxes$WebSocketsPush = Elm.DotsAndBoxes.WebSocketsPush.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var setState = Elm.Native.Port.make(_elm).inboundSignal("setState","Json.Encode.Value",function (v) {    return v;});
   var setPlayerGuid = Elm.Native.Port.make(_elm).inboundSignal("setPlayerGuid",
   "DotsAndBoxes.Model.Guid",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",v);
   });
   var setGameId = Elm.Native.Port.make(_elm).inboundSignal("setGameId",
   "Int",
   function (v) {
      return typeof v === "number" && isFinite(v) && Math.floor(v) === v ? v : _U.badPort("an integer",v);
   });
   var fromPort = F2(function (action,inboundPort) {    return $Signal.map(action)(inboundPort);});
   var inboundPorts = _U.list([A2(fromPort,$DotsAndBoxes$Model.UpdateGameId,setGameId)
                              ,A2(fromPort,$DotsAndBoxes$Model.UpdateGameState,setState)
                              ,A2(fromPort,$DotsAndBoxes$Model.UpdatePlayerGuid,setPlayerGuid)]);
   var actions = $Signal.mailbox($DotsAndBoxes$Model.NoOp);
   var isUpdateableAction = function (model) {
      var _p0 = model.last_action;
      switch (_p0.ctor)
      {case "SignUp": return true;
         case "StartGame": return true;
         case "ClaimSide": return true;
         default: return false;}
   };
   var inputs = $Signal.mergeMany(A2($Basics._op["++"],_U.list([actions.signal]),inboundPorts));
   var model = A3($Signal.foldp,$DotsAndBoxes$Update.update,$DotsAndBoxes$Model.nullModel,inputs);
   var outboundModel = A3($Signal.filter,isUpdateableAction,$DotsAndBoxes$Model.nullModel,model);
   var outboundActionsPayload = A2($Signal.map,$DotsAndBoxes$WebSocketsPush.modelToWebSocketsPayload,outboundModel);
   var broadcastUpdates = Elm.Native.Port.make(_elm).outboundSignal("broadcastUpdates",
   function (v) {
      return v;
   },
   $Signal.map($Json$Encode.encode(0))(outboundActionsPayload));
   var main = A2($Signal.map,$DotsAndBoxes$View.mainView(actions.address),model);
   var broadcastIsCurrentPlayer = Elm.Native.Port.make(_elm).outboundSignal("broadcastIsCurrentPlayer",
   function (v) {
      return v;
   },
   $Signal.dropRepeats(A2($Signal.map,$DotsAndBoxes$Model.isCurrentPlayer,model)));
   return _elm.DotsAndBoxes.values = {_op: _op
                                     ,model: model
                                     ,inputs: inputs
                                     ,isUpdateableAction: isUpdateableAction
                                     ,outboundModel: outboundModel
                                     ,outboundActionsPayload: outboundActionsPayload
                                     ,actions: actions
                                     ,inboundPorts: inboundPorts
                                     ,fromPort: fromPort
                                     ,main: main};
};