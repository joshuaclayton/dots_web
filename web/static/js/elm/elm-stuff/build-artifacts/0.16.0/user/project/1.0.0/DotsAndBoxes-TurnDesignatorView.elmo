Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.TurnDesignatorView = Elm.DotsAndBoxes.TurnDesignatorView || {};
Elm.DotsAndBoxes.TurnDesignatorView.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   _elm.DotsAndBoxes.TurnDesignatorView = _elm.DotsAndBoxes.TurnDesignatorView || {};
   if (_elm.DotsAndBoxes.TurnDesignatorView.values) return _elm.DotsAndBoxes.TurnDesignatorView.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var currentPlayerName = function (model) {
      var _p0 = $DotsAndBoxes$Model.isCurrentPlayer(model);
      if (_p0 === true) {
            return "your";
         } else {
            return A2($Basics._op["++"],model.lobby.game.current_player.name,"\'s");
         }
   };
   var turnDesignator = function (model) {
      return A2($Html.p,_U.list([]),_U.list([$Html.text(A2($Basics._op["++"],"It\'s ",A2($Basics._op["++"],currentPlayerName(model)," turn")))]));
   };
   return _elm.DotsAndBoxes.TurnDesignatorView.values = {_op: _op,turnDesignator: turnDesignator};
};