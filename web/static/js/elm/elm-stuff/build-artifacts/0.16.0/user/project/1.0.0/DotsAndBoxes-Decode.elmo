Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.Decode = Elm.DotsAndBoxes.Decode || {};
Elm.DotsAndBoxes.Decode.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   _elm.DotsAndBoxes.Decode = _elm.DotsAndBoxes.Decode || {};
   if (_elm.DotsAndBoxes.Decode.values) return _elm.DotsAndBoxes.Decode.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Decode$Extra = Elm.Json.Decode.Extra.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var player = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],$Json$Decode.succeed($DotsAndBoxes$Model.Player),A2($Json$Decode._op[":="],"name",$Json$Decode.string)),
   A2($Json$Decode._op[":="],"active",$Json$Decode.bool)),
   A2($Json$Decode._op[":="],"id",$Json$Decode.string));
   var playerScore = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],$Json$Decode.succeed($DotsAndBoxes$Model.PlayerScore),A2($Json$Decode._op[":="],"player",player)),
   A2($Json$Decode._op[":="],"score",$Json$Decode.$int));
   var decodeWinners = function (players) {    return $Json$Decode.succeed(A2($Maybe.withDefault,_U.list([]),players));};
   var score = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   $Json$Decode.succeed($DotsAndBoxes$Model.Score),
   A2($Json$Decode.andThen,$Json$Decode.maybe(A2($Json$Decode._op[":="],"winners",$Json$Decode.list(player))),decodeWinners)),
   A2($Json$Decode._op[":="],"scores",$Json$Decode.list(playerScore)));
   var game = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   $Json$Decode.succeed($DotsAndBoxes$Model.Game),
   A2($Json$Decode._op[":="],"current_player",$Json$Decode.oneOf(_U.list([player,$Json$Decode.$null($DotsAndBoxes$Model.nullPlayer)])))),
   A2($Json$Decode._op[":="],"players",$Json$Decode.list(player))),
   A2($Json$Decode._op[":="],"completed",$Json$Decode.bool)),
   A2($Json$Decode._op[":="],"score",score));
   var lobbyStatus = function (status) {
      var _p0 = status;
      switch (_p0)
      {case "not_started": return $DotsAndBoxes$Model.NotStarted;
         case "started": return $DotsAndBoxes$Model.Started;
         default: return $DotsAndBoxes$Model.Unknown;}
   };
   var decodeStatus = function (status) {    return $Json$Decode.succeed(lobbyStatus(status));};
   var lobby = A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],
   A2($Json$Decode$Extra._op["|:"],$Json$Decode.succeed($DotsAndBoxes$Model.Lobby),A2($Json$Decode._op[":="],"width",$Json$Decode.$int)),
   A2($Json$Decode._op[":="],"height",$Json$Decode.$int)),
   A2($Json$Decode.andThen,A2($Json$Decode._op[":="],"status",$Json$Decode.string),decodeStatus)),
   A2($Json$Decode._op[":="],"game",game));
   var decodeLobby = function (payload) {
      var decodedLobby = A2($Json$Decode.decodeValue,lobby,payload);
      return A2($Result.withDefault,$DotsAndBoxes$Model.nullLobby,decodedLobby);
   };
   return _elm.DotsAndBoxes.Decode.values = {_op: _op,decodeLobby: decodeLobby};
};