Elm.DotsAndBoxes = Elm.DotsAndBoxes || {};
Elm.DotsAndBoxes.RegistrationView = Elm.DotsAndBoxes.RegistrationView || {};
Elm.DotsAndBoxes.RegistrationView.make = function (_elm) {
   "use strict";
   _elm.DotsAndBoxes = _elm.DotsAndBoxes || {};
   _elm.DotsAndBoxes.RegistrationView = _elm.DotsAndBoxes.RegistrationView || {};
   if (_elm.DotsAndBoxes.RegistrationView.values) return _elm.DotsAndBoxes.RegistrationView.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $DotsAndBoxes$CustomEvent = Elm.DotsAndBoxes.CustomEvent.make(_elm),
   $DotsAndBoxes$Model = Elm.DotsAndBoxes.Model.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var registrationSubmitDisabled = function (model) {
      var _p0 = {ctor: "_Tuple3",_0: model.player_name,_1: model.board_size,_2: model.lobby.width};
      if (_p0._0.ctor === "Nothing") {
            return $Html$Attributes.disabled(true);
         } else {
            if (_p0._1 === 0 && _p0._2 === 0) {
                  return $Html$Attributes.disabled(true);
               } else {
                  return $Html$Attributes.disabled(false);
               }
         }
   };
   var setPlayerName = function (fieldValue) {    return $DotsAndBoxes$Model.SetPlayerName($String.trim(fieldValue));};
   var formattedBoardSize = function (size) {
      return A3($List.foldr,F2(function (x,y) {    return A2($Basics._op["++"],x,y);}),"",A2($List.intersperse,"x",A2($List.repeat,2,$Basics.toString(size))));
   };
   var sizeSelector = F3(function (address,model,size) {
      var chosenClass = _U.eq(model.board_size,size) ? "chosen" : "";
      return A2($Html.a,
      _U.list([A2($Html$Events.onClick,address,$DotsAndBoxes$Model.ChooseSize(size)),$Html$Attributes.$class(chosenClass)]),
      _U.list([$Html.text(formattedBoardSize(size))]));
   });
   var boardChosen = function (model) {
      var _p1 = {ctor: "_Tuple2",_0: model.lobby.width,_1: model.lobby.height};
      if (_p1._0 === 0 && _p1._1 === 0) {
            return false;
         } else {
            return true;
         }
   };
   var boardSizeSelector = F2(function (address,model) {
      return boardChosen(model) ? A2($Html.li,_U.list([]),_U.list([])) : A2($Html.li,
      _U.list([]),
      _U.list([A2($Html.label,_U.list([$Html$Attributes.$for("board_size")]),_U.list([$Html.text("Next, what board size do you prefer?")]))
              ,A2($Html.section,_U.list([$Html$Attributes.$class("size-selector")]),A2($List.map,A2(sizeSelector,address,model),_U.list([2,5,10])))]));
   });
   var registrationView = F2(function (address,model) {
      return A2($Html.section,
      _U.list([$Html$Attributes.$class("registration modal")]),
      _U.list([A2($Html.h2,_U.list([$Html$Attributes.$class("title")]),_U.list([$Html.text("Let\'s get started!")]))
              ,A2($Html.form,
              _U.list([A2($DotsAndBoxes$CustomEvent.onSubmit,address,$DotsAndBoxes$Model.SignUp)]),
              _U.list([A2($Html.ul,
              _U.list([]),
              _U.list([A2($Html.li,
                      _U.list([]),
                      _U.list([A2($Html.label,_U.list([$Html$Attributes.$for("player_name")]),_U.list([$Html.text("First, what\'s your name?")]))
                              ,A2($Html.input,
                              _U.list([$Html$Attributes.type$("text")
                                      ,$Html$Attributes.id("player_name")
                                      ,A3($Html$Events.on,
                                      "input",
                                      $Html$Events.targetValue,
                                      function (_p2) {
                                         return A2($Signal.message,address,setPlayerName(_p2));
                                      })
                                      ,$Html$Attributes.autocomplete(false)]),
                              _U.list([]))]))
                      ,A2(boardSizeSelector,address,model)
                      ,A2($Html.li,
                      _U.list([]),
                      _U.list([A2($Html.input,
                      _U.list([$Html$Attributes.type$("submit"),$Html$Attributes.value("Game on!"),registrationSubmitDisabled(model)]),
                      _U.list([]))]))]))]))]));
   });
   return _elm.DotsAndBoxes.RegistrationView.values = {_op: _op
                                                      ,registrationView: registrationView
                                                      ,boardChosen: boardChosen
                                                      ,boardSizeSelector: boardSizeSelector
                                                      ,sizeSelector: sizeSelector
                                                      ,formattedBoardSize: formattedBoardSize
                                                      ,setPlayerName: setPlayerName
                                                      ,registrationSubmitDisabled: registrationSubmitDisabled};
};